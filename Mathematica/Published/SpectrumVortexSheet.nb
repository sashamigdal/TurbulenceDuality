(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     80687,       1687]
NotebookOptionsPosition[     77900,       1631]
NotebookOutlinePosition[     78236,       1646]
CellTagsIndexPosition[     78193,       1643]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Burgers", " ", "Vortex", " ", "Sheet", " ", "Solution", " ", "of", " ", 
     "the", " ", "Navier"}], "-", 
    RowBox[{"Stokes", " ", "Equation"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.819847674135706*^9, 3.819847682753804*^9}},
 CellLabel->"In[1]:="],

Cell[BoxData[""], "Input"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"V", "[", 
     RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", " ", "x"}], " ", ",", " ", 
      RowBox[{
       RowBox[{"b", " ", "y"}], " ", "+", "  ", 
       RowBox[{"S", "[", "z", "]"}]}], ",", " ", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"(", 
         RowBox[{"a", "+", "b"}], ")"}]}], "z"}]}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"velocity", " ", "field"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"P", "[", 
     RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], " ", "=", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       RowBox[{"a", "^", "2"}]}], " ", 
      RowBox[{
       RowBox[{"x", "^", "2"}], "/", "2"}]}], " ", "-", " ", 
     RowBox[{
      RowBox[{"b", "^", "2"}], " ", 
      RowBox[{
       RowBox[{"y", "^", "2"}], "/", "2"}]}], "-", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], "^", "2"}], " ", 
      RowBox[{
       RowBox[{"z", "^", "2"}], " ", "/", "2"}]}]}]}], ";"}], " ", 
  RowBox[{"(*", " ", "pressure", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Laplace", " ", "operator"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Lap", "[", 
     RowBox[{"G_", ",", " ", "R_"}], "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{"G", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"R", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "2"}], "}"}]}], "]"}], "+", 
     RowBox[{"D", "[", 
      RowBox[{"G", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"R", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", "2"}], "}"}]}], "]"}], " ", 
     "+", " ", 
     RowBox[{"D", "[", 
      RowBox[{"G", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"R", "[", 
          RowBox[{"[", "3", "]"}], "]"}], ",", "2"}], "}"}]}], "]"}]}]}], 
   ";"}], " ", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Navier", "-", 
    RowBox[{"Stokes", " ", "Equation"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NSEq", "[", 
    RowBox[{"VV_", ",", "PP_", ",", " ", "R_"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"Nu", " ", 
     RowBox[{"Lap", "[", 
      RowBox[{"VV", ",", "R"}], "]"}]}], " ", "-", " ", 
    RowBox[{
     RowBox[{"Grad", "[", 
      RowBox[{"VV", ",", "R"}], "]"}], ".", "VV"}], " ", "-", 
    RowBox[{"Grad", "[", 
     RowBox[{"PP", ",", "R"}], "]"}]}]}], ";"}]}], "Input"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Incompressibility", " ", "equation"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.819847775009664*^9, 3.8198478042802887`*^9}},
 CellLabel->"In[6]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Div", "[", 
  RowBox[{
   RowBox[{"V", "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.81970900865335*^9, 3.81970902828368*^9}},
 CellLabel->"In[14]:="],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[14]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Seq", " ", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"S", "''"}], "[", "z", "]"}], " ", "->", " ", 
   RowBox[{
    RowBox[{"q", " ", "z", " ", 
     RowBox[{
      RowBox[{"S", "'"}], "[", "z", "]"}]}], " ", "+", " ", 
    RowBox[{"p", " ", 
     RowBox[{"S", "[", "z", "]"}]}]}]}]}]], "Input",
 CellLabel->"In[17]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["S", "\[Prime]\[Prime]",
    MultilineFunction->None], "[", "z", "]"}], "\[Rule]", 
  RowBox[{
   RowBox[{"p", " ", 
    RowBox[{"S", "[", "z", "]"}]}], "+", 
   RowBox[{"q", " ", "z", " ", 
    RowBox[{
     SuperscriptBox["S", "\[Prime]",
      MultilineFunction->None], "[", "z", "]"}]}]}]}]], "Output",
 CellLabel->"Out[17]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"NSEq", "[", 
    RowBox[{
     RowBox[{"V", "[", 
      RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", 
     RowBox[{"P", "[", 
      RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], "/.", "Seq"}], 
  "]"}]], "Input",
 CellLabel->"In[27]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "b"}], "+", 
       RowBox[{"Nu", " ", "p"}]}], ")"}], " ", 
     RowBox[{"S", "[", "z", "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "+", "b", "+", 
       RowBox[{"Nu", " ", "q"}]}], ")"}], " ", "z", " ", 
     RowBox[{
      SuperscriptBox["S", "\[Prime]",
       MultilineFunction->None], "[", "z", "]"}]}]}], ",", "0"}], 
  "}"}]], "Output",
 CellLabel->"Out[27]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sol", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"p", "->", 
     RowBox[{"b", "/", "Nu"}]}], ",", 
    RowBox[{"q", "->", " ", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}]}], "/", "Nu"}]}]}], "}"}]}]], "Input",
 CellLabel->"In[28]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"p", "\[Rule]", 
    FractionBox["b", "Nu"]}], ",", 
   RowBox[{"q", "\[Rule]", 
    FractionBox[
     RowBox[{
      RowBox[{"-", "a"}], "-", "b"}], "Nu"]}]}], "}"}]], "Output",
 CellLabel->"Out[28]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"NSEq", "[", 
     RowBox[{
      RowBox[{"V", "[", 
       RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", 
      RowBox[{"P", "[", 
       RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}], "/.", "Seq"}], "/.",
    "Sol"}], "]"}]], "Input",
 CellLabel->"In[29]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[29]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Seqsol", " ", "=", " ", 
  RowBox[{"Seq", "/.", "Sol"}]}]], "Input",
 CellLabel->"In[31]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["S", "\[Prime]\[Prime]",
    MultilineFunction->None], "[", "z", "]"}], "\[Rule]", 
  RowBox[{
   FractionBox[
    RowBox[{"b", " ", 
     RowBox[{"S", "[", "z", "]"}]}], "Nu"], "+", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "a"}], "-", "b"}], ")"}], " ", "z", " ", 
     RowBox[{
      SuperscriptBox["S", "\[Prime]",
       MultilineFunction->None], "[", "z", "]"}]}], "Nu"]}]}]], "Output",
 CellLabel->"Out[31]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{"b", " ", 
        RowBox[{"S", "[", "z", "]"}]}], "Nu"], "+", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "a"}], "-", "b"}], ")"}], " ", "z", " ", 
        RowBox[{
         SuperscriptBox["S", "\[Prime]",
          MultilineFunction->None], "[", "z", "]"}]}], "Nu"]}], "==", 
     RowBox[{
      RowBox[{"S", "''"}], "[", "z", "]"}]}], ",", 
    RowBox[{"S", "[", "z", "]"}], ",", "z"}], "]"}], "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellLabel->"In[34]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"S", "[", "z", "]"}], "\[Rule]", 
   RowBox[{
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{"a", "+", "b"}], ")"}], " ", 
         SuperscriptBox["z", "2"]}], 
        RowBox[{"2", " ", "Nu"}]]}]], " ", 
     TemplateBox[{"1"},
      "C"], " ", 
     RowBox[{"HermiteH", "[", 
      RowBox[{
       FractionBox[
        RowBox[{
         RowBox[{"-", "a"}], "-", 
         RowBox[{"2", " ", "b"}]}], 
        RowBox[{"a", "+", "b"}]], ",", 
       FractionBox[
        RowBox[{
         SqrtBox[
          RowBox[{"a", "+", "b"}]], " ", "z"}], 
        RowBox[{
         SqrtBox["2"], " ", 
         SqrtBox["Nu"]}]]}], "]"}]}], "+", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{"a", "+", "b"}], ")"}], " ", 
         SuperscriptBox["z", "2"]}], 
        RowBox[{"2", " ", "Nu"}]]}]], " ", 
     TemplateBox[{"2"},
      "C"], " ", 
     RowBox[{"Hypergeometric1F1", "[", 
      RowBox[{
       RowBox[{"-", 
        FractionBox[
         RowBox[{
          RowBox[{"-", "a"}], "-", 
          RowBox[{"2", " ", "b"}]}], 
         RowBox[{"2", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}]}]]}], ",", 
       FractionBox["1", "2"], ",", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{"a", "+", "b"}], ")"}], " ", 
         SuperscriptBox["z", "2"]}], 
        RowBox[{"2", " ", "Nu"}]]}], "]"}]}]}]}], "}"}]], "Output",
 CellLabel->"Out[34]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"absol", " ", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox[
         RowBox[{
          RowBox[{"-", "a"}], "-", 
          RowBox[{"2", " ", "b"}]}], 
         RowBox[{"a", "+", "b"}]], "==", "n"}], ",", " ", 
       RowBox[{
        RowBox[{"a", "+", " ", "b"}], " ", "==", " ", "c"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellLabel->"In[89]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{
     RowBox[{"2", " ", "c"}], "+", 
     RowBox[{"c", " ", "n"}]}]}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{
     RowBox[{"-", "c"}], "-", 
     RowBox[{"c", " ", "n"}]}]}]}], "}"}]], "Output",
 CellLabel->"Out[89]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"V", "[", 
   RowBox[{"x", ",", "y", ",", "z"}], "]"}], " ", "/.", "absol"}]], "Input",
 CellLabel->"In[91]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "c"}], "+", 
      RowBox[{"c", " ", "n"}]}], ")"}], " ", "x"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "c"}], "-", 
       RowBox[{"c", " ", "n"}]}], ")"}], " ", "y"}], "+", 
    RowBox[{"S", "[", "z", "]"}]}], ",", 
   RowBox[{
    RowBox[{"-", "c"}], " ", "z"}]}], "}"}]], "Output",
 CellLabel->"Out[91]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Show", "[", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         FractionBox[
          RowBox[{"-", 
           SuperscriptBox["z", "2"]}], 
          RowBox[{"2", " "}]]], "  ", 
        RowBox[{"HermiteH", "[", 
         RowBox[{"0", ",", 
          FractionBox["z", 
           RowBox[{
            SqrtBox["2"], " "}]]}], "]"}]}], ",", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         FractionBox[
          RowBox[{"-", 
           SuperscriptBox["z", "2"]}], 
          RowBox[{"2", " "}]]], "  ", 
        RowBox[{"HermiteH", "[", 
         RowBox[{"1", ",", 
          FractionBox["z", 
           RowBox[{
            SqrtBox["2"], " "}]]}], "]"}]}], ",", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         FractionBox[
          RowBox[{"-", 
           SuperscriptBox["z", "2"]}], 
          RowBox[{"2", " "}]]], "  ", 
        RowBox[{"HermiteH", "[", 
         RowBox[{"2", ",", 
          FractionBox["z", 
           RowBox[{
            SqrtBox["2"], " "}]]}], "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", " ", 
     RowBox[{"PlotRange", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}]}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "2"}], "}"}]}]}], "]"}], "]"}]}]], "Input",\

 CellLabel->"In[114]:="],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
770z+v/3zv8DWdN67Q==
          "]]}, 
        Annotation[#, "Charting`Private`Tag$51704#1"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
HT/PP9X/v2+A/P99A9X/A/cFNSA=
          "]]}, 
        Annotation[#, "Charting`Private`Tag$51704#2"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
i+GFYbs4/N/9GOz/78f8D6zFyOs=
          "]]}, 
        Annotation[#, "Charting`Private`Tag$51704#3"]& ]}}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {0, 0}}, PlotRangeClipping -> True, ImagePadding -> 
     All, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None,
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-4.9999997959183675`, 4.9999997959183675`}, {-2, 2}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {Automatic, Automatic}}, 
     Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"0", "1", "2"}, "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellLabel->"Out[114]="]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 363, 9, 70, "Input",ExpressionUUID->"827834e2-4ebb-4cd8-8505-476acd0a6dea"],
Cell[924, 31, 26, 0, 70, "Input",ExpressionUUID->"5200e8f4-fd9d-44b2-95f7-016dc6e3fe98"],
Cell[953, 33, 2655, 84, 70, "Input",ExpressionUUID->"67688197-5a70-420f-9487-204c71256392"],
Cell[3611, 119, 198, 4, 70, "Input",ExpressionUUID->"4516b119-43fb-4df0-99ae-14413ae2a5c7"],
Cell[CellGroupData[{
Cell[3834, 127, 290, 8, 70, "Input",ExpressionUUID->"1bd7b6ae-d21c-49fe-842c-5b7428cc92bd"],
Cell[4127, 137, 52, 1, 70, "Output",ExpressionUUID->"b79ccc76-8214-454b-a5ce-f200838ff072"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4216, 143, 342, 11, 70, "Input",ExpressionUUID->"f66e6758-b273-4f95-8cf9-23ad70026a36"],
Cell[4561, 156, 383, 12, 70, "Output",ExpressionUUID->"55002dda-374f-4439-be80-8aa47773fdd2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4981, 173, 389, 12, 70, "Input",ExpressionUUID->"7bceec69-f3b8-410e-a7c4-a01fdb4265a8"],
Cell[5373, 187, 520, 18, 70, "Output",ExpressionUUID->"be93a0ae-5f99-467c-8283-ea1a731ad1c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5930, 210, 322, 11, 70, "Input",ExpressionUUID->"44265ef9-ac4c-483c-8c1b-f29074596884"],
Cell[6255, 223, 253, 9, 70, "Output",ExpressionUUID->"d74e391d-a5ce-43c8-9faa-d2cb460a7b25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6545, 237, 425, 13, 70, "Input",ExpressionUUID->"34964f92-2de1-4456-86eb-c96a4dfe7907"],
Cell[6973, 252, 107, 3, 70, "Output",ExpressionUUID->"39bcb0cc-6b56-4531-8562-12583f4032a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7117, 260, 116, 3, 70, "Input",ExpressionUUID->"88597f85-8258-4347-9f53-8a5b565df4ff"],
Cell[7236, 265, 511, 17, 70, "Output",ExpressionUUID->"10c15b6b-a255-4b38-a71a-d0902e8c40b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7784, 287, 648, 21, 70, "Input",ExpressionUUID->"1422a5b8-0bdb-4dda-b07c-e4f4a7250890"],
Cell[8435, 310, 1664, 58, 70, "Output",ExpressionUUID->"2b611b09-f575-4725-8715-7cc5ebd1c537"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10136, 373, 549, 18, 70, "Input",ExpressionUUID->"fc5d2c07-569d-4c81-bfde-c7ba18ce44b4"],
Cell[10688, 393, 306, 11, 70, "Output",ExpressionUUID->"53138a83-b8e2-45fe-94a7-a3d7ec4e7244"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11031, 409, 145, 4, 70, "Input",ExpressionUUID->"685c82fc-9d16-4a26-95b7-8c48f881acba"],
Cell[11179, 415, 463, 17, 70, "Output",ExpressionUUID->"7577f81d-c498-4372-b7e9-5565da190627"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11679, 437, 1577, 51, 70, "Input",ExpressionUUID->"2733a55e-bbd2-42e4-9113-2908e35b1651"],
Cell[13259, 490, 64625, 1138, 70, "Output",ExpressionUUID->"e35a934d-9521-4dd9-8a78-d19c0a957459"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
